plugins {
	id 'fabric-loom' version '0.8+'
	id 'maven-publish'
	id "com.modrinth.minotaur" version "1.1.0"
	id "com.matthewprenger.cursegradle" version "1.4.0"
	id 'org.ajoberstar.grgit' version '4.1.0'
}
class info {
	// Small QOL things
	static def baseMCversion = '1.17'
	static def indev = false
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = "${project.archives_base_name}-${project.mod_loader}-${project.minecraft_version}"
version = "${project.mod_version}+${getVersionMetadata()}+unstable"
group = project.maven_group

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
	maven {
		name 'Fabric'
		url 'https://maven.fabricmc.net'
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.minecraft_version}+build.${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
	// You may need to force-disable transitiveness on them.
	//modRuntime "me.steinborn:lazydfu:0.1.2"
	//modRuntime "me.jellysquid.mods:sodium-fabric-mc1.17:0.2.0+build.24"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"

	// Minecraft 1.17 (21w19a) upwards uses Java 16
	it.options.release = 16
	}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
		maven {
			name 'Fabric'
			url 'https://maven.fabricmc.net'
		}
	}
}
task modrinth(type: com.modrinth.minotaur.TaskModrinthUpload, dependsOn: remapJar) {
	onlyIf {
		System.getenv("MODRINTH_TOKEN")
	}
	token = System.getenv("MODRINTH_TOKEN") // Use an environment property if releasing your source code on GitHub!
	projectId = '5XACEUIs' // The ID of your modrinth project, slugs will not work.
	versionNumber = "Periodic $project.version" // The version of the mod to upload.
	versionName = "[$info.baseMCversion] v$project.version"
	releaseType = info.indev ? "beta" : "release"
	uploadFile = remapJar // This links to a task that builds your mod jar and sets "uploadFile" to the mod jar.
	addGameVersion('1.17') // Any minecraft version.
	addGameVersion('1.17.1')
	addLoader('fabric') // Can be fabric or forge. Modrinth will support liteloader and rift at a later date.
}
def CURSEFORGE_TOKEN = System.getenv("CURSEFORGE_TOKEN")

curseforge {
	apiKey CURSEFORGE_TOKEN == null ? "" : CURSEFORGE_TOKEN
	project {
		id = '470001'
		releaseType = info.indev ? 'beta' : "release"
		relations {
			requiredDependency "fabric-api" // Fabric API is required
		}
		addGameVersion '1.17'
		addGameVersion '1.17.1'
		addGameVersion "Fabric"

		mainArtifact(file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar")) {
			displayName = "[$info.baseMCversion] Periodic $project.version"
		}
		afterEvaluate {
			uploadTask.dependsOn(remapJar)
		}
	}
	options {
		forgeGradleIntegration = false
	}
}

Object getVersionMetadata() {
	def build_id = System.getenv("GITHUB_RUN_NUMBER")

	// CI builds only
	if (build_id != null) {
		return "build.${build_id}"
	}

	if (grgit != null) {
		def head = grgit.head()
		def id = head.abbreviatedId

		// Flag the build if the build tree is not clean
		if (!grgit.status().clean) {
			id += "-dirty"
		}

		return "rev.${id}"
	}

	// No tracking information could be found about the build
	return "unknown"
}